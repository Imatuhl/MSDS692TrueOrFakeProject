backend.clear_session()


model = models.Sequential()
model.add(layers.Embedding(vocab_size, embedding_dim, input_length= length))
model.add(layers.Conv1D(128,kernel_size=5, activation ='relu'))
model.add(layers.Conv1D(128,kernel_size=5, activation ='relu'))
model.add(layers.Conv1D(128,kernel_size=5, activation ='relu'))
model.add(layers.Conv1D(64,kernel_size=5, activation ='relu'))
model.add(layers.Conv1D(64,kernel_size=5, activation ='relu'))
model.add(layers.Conv1D(64,kernel_size=5, activation ='relu'))
model.add(BatchNormalization())
model.add(layers.Flatten())
model.add(layers.Dense(128, activation ='relu'))
model.add(layers.Dense(1, activation='sigmoid'))

model.summary()

model.compile (optimizer='adam',
               loss='binary_crossentropy',
               metrics=['accuracy'])

history = model.fit(X_train,
                    ytrain,
                    epochs = 15,
                    batch_size=500,
                    validation_data = (X_test, ytest),
                    verbose = 1,
                    callbacks=[EarlyStopping(monitor='val_accuracy', patience=5, restore_best_weights=True)])

loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(1, len(loss) +1)

plt.plot(epochs, loss, 'bo', label='Training loss')
plt.plot(epochs, val_loss, 'b', label='Validation loss')
plt.title('Training and Validation loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()

plt.show()

accuracy = history.history['accuracy']
val_accuracy = history.history['val_accuracy']

plt.plot(epochs, accuracy, 'bo', label='Training accuracy')
plt.plot(epochs, val_accuracy, 'b', label='Validation accuracy')
plt.title('Training and validation accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()

plt.show()

results = model.evaluate(X_test, ytest)
results

## Vizualizations
pred = model.predict_classes(X_test)
pred[:5]

confmatrix = confusion_matrix(ytest, pred)
confmatrix

confmatrix = pd.DataFrame(confmatrix, index = ['FakeNews','Factual'], columns=['FakeNews','Factual'])
plt.figure(figsize = (10,10))
sns.heatmap(confmatrix, cmap='Reds', linecolor = 'black',
           linewidth = 1, annot= True, fmt='',xticklabels=['FakeNews','Factual'],
            yticklabels = ['FakeNews','Factual'])
plt.xlabel("Actual")
plt.ylabel("Predicted")
